generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  MASTER
  COLABORADOR
}

enum SkillLevel {
  NAO_ATENDE
  ATENDE
  IMPLANTA_SOZINHO
  ESPECIALISTA
}

model User {
  id           String                @id @default(cuid())
  email        String                @unique
  passwordHash String
  role         Role
  mustChangePassword Boolean         @default(false)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  collaboratorProfile CollaboratorProfile?
  auditLogs           AuditLog[]

  @@map("users")
}

model CollaboratorProfile {
  id            String               @id @default(cuid())
  userId        String?              @unique
  fullName      String
  admissionDate DateTime
  activities    Json?
  notes         String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  user        User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  skillClaims SkillClaim[]
  assessments ManagerAssessment[]
  careerPlans CareerPlan[]

  @@map("collaborator_profiles")
}

model ModuleRoutine {
  id          String            @id @default(cuid())
  code        String            @unique
  description String
  observation String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  skillClaims SkillClaim[]
  assessments ManagerAssessment[]
  careerPlanModules CareerPlanModule[]

  @@map("module_routines")
}

model SkillClaim {
  id             String               @id @default(cuid())
  collaboratorId String
  moduleId       String
  currentLevel   SkillLevel
  evidence       String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  collaborator CollaboratorProfile @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)
  module       ModuleRoutine       @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([collaboratorId, moduleId])
  @@map("skill_claims")
}

model ManagerAssessment {
  id             String               @id @default(cuid())
  collaboratorId String
  moduleId       String
  targetLevel    SkillLevel
  comment        String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  collaborator CollaboratorProfile @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)
  module       ModuleRoutine       @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([collaboratorId, moduleId])
  @@map("manager_assessments")
}

model CareerPlan {
  id             String               @id @default(cuid())
  collaboratorId String
  objectives     String
  dueDate        DateTime?
  notes          String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  collaborator CollaboratorProfile @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)
  modules      CareerPlanModule[]

  @@map("career_plans")
}

model CareerPlanModule {
  id           String      @id @default(cuid())
  careerPlanId String
  moduleId     String
  createdAt    DateTime    @default(now())

  careerPlan CareerPlan  @relation(fields: [careerPlanId], references: [id], onDelete: Cascade)
  module     ModuleRoutine @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([careerPlanId, moduleId])
  @@map("career_plan_modules")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String
  entityId  String?
  payload   Json?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}
